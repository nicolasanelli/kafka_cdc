openapi: 3.0.3
info:
  title: Kafka Connect / Debezium
  # description: |-
  #   This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  #   Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  #   You can now help us improve the API whether it's by making changes to the definition itself or to the code.
  #   That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  #   _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
  #   Some useful links:
  #   - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
  #   - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  # termsOfService: http://swagger.io/terms/
  # contact:
    # email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more debezium
  url: https://debezium.io/documentation/
servers:
  - url: http://localhost:8083
# tags:
  # - name: default
  # - name: connectors
    # description: Everything about your Pets
    # externalDocs:
      # description: Find out more
      # url: http://swagger.io
  # - name: store
    # description: Access to Petstore orders
    # externalDocs:
      # description: Find out more about our store
      # url: http://swagger.io
  # - name: user
    # description: Operations about user
paths:
  "/":
    get:
      tags:
        - Connect Cluster
      summary: Top-level request
      description: Top-level (root) request that gets the version of the Connect worker that serves the REST request, the git commit ID of the source code, and the Kafka cluster ID that the worker is connected to.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  commit:
                    type: string
                  kafka_cluster_id:
                    type: string
  "/connectors":
    get:
      tags:
        - Connector
      summary: Get a list of active connectors
      description: Get a list of active connectors      
      parameters:
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "$connectorName"
    post:
      tags:
        - Connector
      summary: Create a new connector
      description: Create a new connector, returning the current connector info if successful. Return 409 (Conflict) if rebalance is in process, or if the connector already exists.
      requestBody:
        description: Create a new connector
        content:
          application/json:
            schema:
                type: object
                properties:
                  name:
                    type: string
                    example: mysql-connector-xpto
                    description: Unique name for the connector. Attempting to register again with the same name fails. This property is required by all Kafka Connect connectors
                  config:
                    type: object
                    properties:
                      connector.class:
                        type: string
                        example: io.debezium.connector.mysql.MySqlConnector
                        description: The name of the Java class for the connector. Always specify io.debezium.connector.mysql.MySqlConnector for the MySQL connector
                      tasks.max:
                        type: integer
                        example: 1
                        description: The maximum number of tasks that should be created for this connector. The MySQL connector always uses a single task and therefore does not use this value, so the default is always acceptable.
                      connector.adapter:
                        type: string
                        description: The connector adapter mode to be used
                        enum:
                          - mysql
                          - mariadb
                      database.protocol:
                        type: string
                        description: JDBC protocol used by the driver connection string for connecting to the database
                        enum:
                          - jdbc:mysql
                          - jdbc:mariadb
                      database.hostname:
                        type: string
                        example: 192.168.99.100
                      database.port:
                        type: string
                        example: 3306
                      database.user:
                        type: string
                        example: debezium-user
                      database.password:
                        type: string
                        example: debezium-user-pw
                      database.server.id:
                        type: string
                        example: 184054
                      topic.prefix:
                        type: string
                        example: fullfillment
                      database.include.list:
                        type: string
                        example: inventory
                      schema.history.internal.kafka.bootstrap.servers:
                        type: string
                        example: kafka:29092
                      schema.history.internal.kafka.topic:
                        type: string
                        example: schemahistory.fullfillment
                      include.schema.changes:
                        type: string
                        example: true
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  "/connectors/{name}":
    get:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  config:
                    type: object
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        connector:
                          type: string
                        task:
                          type: integer
                          example: 3
    delete:
      tags:
        - Connector
      summary: Delete a connector, halting all tasks and deleting its configuration
      description: Delete a connector, halting all tasks and deleting its configuration      
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
        '409':
          description: Return 409 (Conflict) if rebalance is in process
  "/connectors/{name}/config":
    get:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "$connectorName"
    put:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "$connectorName"
  "/connectors/{name}/status":
    get:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "$connectorName"
  "/connectors/{name}/restart":
    post:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: Retrieves additional state information for each of the connectors returned in the API call. 
          required: false
          schema:
            type: string
            enum:
              - status
              - info
              - status,info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "$connectorName"
  "/connectors/{name}/pause":
    put:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
  "/connectors/{name}/resume":
    put:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
  "/connectors/{name}/stop":
    put:
      tags:
        - Connector
      summary: Get information about the connector.
      description: Get information about the connector.    
      parameters:
        - name: name
          in: path
          description: Connector name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
  "/connector-plugins":
    get:
      tags:
        - Connector plugins
      summary: Return a list of connector plugins
      description: Return a list of connector plugins installed in the Kafka Connect cluster.  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    class:
                      type: string
                      example: io.debezium.connector.mysql.MySqlConnector
                    type:
                      type: string
                      enum:
                        - source
                        - sink
                    version:
                      type: string
                      example: 2.7.0.Beta2
      
  
# components:
  # schemas:
  # requestBodies:
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header